// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`can render the most basic of documents (single paragraph) 1`] = `
<div>
  <p>
    Test
  </p>
</div>
`;

exports[`can render the whole spectrum of markdown within a single run 1`] = `
<div
  data-sourcepos="1:1-154:1"
>
  <h1
    data-sourcepos="1:1-1:13"
  >
    h1 Heading
  </h1>
  <h2
    data-sourcepos="2:1-2:14"
  >
    h2 Heading
  </h2>
  <h3
    data-sourcepos="3:1-3:15"
  >
    h3 Heading
  </h3>
  <h4
    data-sourcepos="4:1-4:16"
  >
    h4 Heading
  </h4>
  <h5
    data-sourcepos="5:1-5:17"
  >
    h5 Heading
  </h5>
  <h6
    data-sourcepos="6:1-6:18"
  >
    h6 Heading
  </h6>
  <h2
    data-sourcepos="9:1-9:20"
  >
    Horizontal Rules
  </h2>
  <hr
    data-sourcepos="11:1-11:4"
  />
  <hr
    data-sourcepos="13:1-13:4"
  />
  <hr
    data-sourcepos="15:1-15:4"
  />
  <h2
    data-sourcepos="18:1-18:12"
  >
    Emphasis
  </h2>
  <p
    data-sourcepos="20:1-20:22"
  >
    <strong
      data-sourcepos="20:1-20:22"
    >
      This is bold text
    </strong>
  </p>
  <p
    data-sourcepos="22:1-22:22"
  >
    <strong
      data-sourcepos="22:1-22:22"
    >
      This is bold text
    </strong>
  </p>
  <p
    data-sourcepos="24:1-24:22"
  >
    <em
      data-sourcepos="24:1-24:22"
    >
      This is italic text
    </em>
  </p>
  <p
    data-sourcepos="26:1-26:22"
  >
    <em
      data-sourcepos="26:1-26:22"
    >
      This is italic text
    </em>
  </p>
  <p
    data-sourcepos="28:1-28:18"
  >
    <del
      data-sourcepos="28:1-28:18"
    >
      Strikethrough
    </del>
  </p>
  <h2
    data-sourcepos="31:1-31:15"
  >
    Blockquotes
  </h2>
  <blockquote
    data-sourcepos="34:1-36:40"
  >
    <p
      data-sourcepos="34:3-34:36"
    >
      Blockquotes can also be nested...
    </p>
    <blockquote
      data-sourcepos="35:2-36:40"
    >
      <p
        data-sourcepos="35:4-35:73"
      >
        ...by using additional greater-than signs right next to each other...
      </p>
      <blockquote
        data-sourcepos="36:5-36:40"
      >
        <p
          data-sourcepos="36:7-36:40"
        >
          ...or with spaces between arrows.
        </p>
      </blockquote>
    </blockquote>
  </blockquote>
  <h2
    data-sourcepos="39:1-39:9"
  >
    Lists
  </h2>
  <p
    data-sourcepos="41:1-41:10"
  >
    Unordered
  </p>
  <ul
    data-sourcepos="43:1-49:13"
  >
    <li
      data-sourcepos="43:1-43:57"
    >
      Create a list by starting a line with 
      <code
        data-sourcepos="43:41-43:44"
      >
        +
      </code>
      , 
      <code
        data-sourcepos="43:46-43:49"
      >
        -
      </code>
      , or 
      <code
        data-sourcepos="43:54-43:57"
      >
        *
      </code>
    </li>
    <li
      data-sourcepos="44:1-48:35"
    >
      Sub-lists are made by indenting 2 spaces:
    </li>
    <li
      data-sourcepos="49:1-49:13"
    >
      Very easy!
    </li>
  </ul>
  <p
    data-sourcepos="51:1-51:8"
  >
    Ordered
  </p>
  <ol
    data-sourcepos="53:1-55:35"
  >
    <li
      data-sourcepos="53:1-53:30"
    >
      Lorem ipsum dolor sit amet
    </li>
    <li
      data-sourcepos="54:1-54:31"
    >
      Consectetur adipiscing elit
    </li>
    <li
      data-sourcepos="55:1-55:35"
    >
      Integer molestie lorem at massa
    </li>
  </ol>
  <ol
    data-sourcepos="58:1-59:38"
  >
    <li
      data-sourcepos="58:1-58:37"
    >
      You can use sequential numbers...
    </li>
    <li
      data-sourcepos="59:1-59:38"
    >
      ...or keep all the numbers as 
      <code
        data-sourcepos="59:34-59:38"
      >
        1.
      </code>
    </li>
  </ol>
  <p
    data-sourcepos="61:1-61:29"
  >
    Start numbering with offset:
  </p>
  <ol
    data-sourcepos="63:1-64:7"
    start="57"
  >
    <li
      data-sourcepos="63:1-63:8"
    >
      foo
    </li>
    <li
      data-sourcepos="64:1-64:7"
    >
      bar
    </li>
  </ol>
  <p
    data-sourcepos="66:1-66:13"
  >
    Loose lists?
  </p>
  <ul
    data-sourcepos="68:1-70:6"
  >
    <li
      data-sourcepos="68:1-69:1"
    >
      <p
        data-sourcepos="68:3-68:6"
      >
        foo
      </p>
    </li>
    <li
      data-sourcepos="70:1-70:6"
    >
      bar
    </li>
  </ul>
  <h2
    data-sourcepos="73:1-73:8"
  >
    Code
  </h2>
  <p
    data-sourcepos="75:1-75:14"
  >
    Inline 
    <code
      data-sourcepos="75:8-75:14"
    >
      code
    </code>
  </p>
  <p
    data-sourcepos="77:1-77:14"
  >
    Indented code
  </p>
  <pre
    data-sourcepos="79:1-82:19"
  >
    <code>
      // Some comments
line 1 of code
line 2 of code
line 3 of code
    </code>
  </pre>
  <p
    data-sourcepos="85:1-85:20"
  >
    Block code "fences"
  </p>
  <pre
    data-sourcepos="87:1-89:4"
  >
    <code>
      Sample text here...
    </code>
  </pre>
  <p
    data-sourcepos="91:1-91:20"
  >
    Syntax highlighting
  </p>
  <pre
    data-sourcepos="93:1-99:4"
  >
    <code
      className="language-js"
    >
      var foo = function (bar) {
  return bar++;
};

console.log(foo(5));
    </code>
  </pre>
  <h2
    data-sourcepos="101:1-101:10"
  >
    Tables
  </h2>
  <table
    data-sourcepos="103:1-107:25"
  >
    <thead
      data-sourcepos="103:1-103:25"
    >
      <tr
        data-sourcepos="103:1-103:25"
      >
        <th
          data-sourcepos="103:3-103:9"
        >
          Tag
        </th>
        <th
          data-sourcepos="103:12-103:23"
        >
          Use
        </th>
      </tr>
    </thead>
    <tbody
      data-sourcepos="105:1-107:25"
    >
      <tr
        data-sourcepos="105:1-105:25"
      >
        <td
          data-sourcepos="105:3-105:9"
        >
          p
        </td>
        <td
          data-sourcepos="105:12-105:23"
        >
          Paragraph
        </td>
      </tr>
      <tr
        data-sourcepos="106:1-106:25"
      >
        <td
          data-sourcepos="106:3-106:9"
        >
          table
        </td>
        <td
          data-sourcepos="106:12-106:23"
        >
          Table
        </td>
      </tr>
      <tr
        data-sourcepos="107:1-107:25"
      >
        <td
          data-sourcepos="107:3-107:9"
        >
          em
        </td>
        <td
          data-sourcepos="107:12-107:23"
        >
          Emphasis
        </td>
      </tr>
    </tbody>
  </table>
  <p
    data-sourcepos="109:1-109:27"
  >
    Left/right aligned columns
  </p>
  <table
    data-sourcepos="111:1-115:21"
  >
    <thead
      data-sourcepos="111:1-111:20"
    >
      <tr
        data-sourcepos="111:1-111:20"
      >
        <th
          data-sourcepos="111:3-111:10"
          style={
            Object {
              "textAlign": "left",
            }
          }
        >
          Project
        </th>
        <th
          data-sourcepos="111:13-111:18"
          style={
            Object {
              "textAlign": "right",
            }
          }
        >
          Stars
        </th>
      </tr>
    </thead>
    <tbody
      data-sourcepos="113:1-115:21"
    >
      <tr
        data-sourcepos="113:1-113:19"
      >
        <td
          data-sourcepos="113:3-113:8"
          style={
            Object {
              "textAlign": "left",
            }
          }
        >
          React
        </td>
        <td
          data-sourcepos="113:11-113:17"
          style={
            Object {
              "textAlign": "right",
            }
          }
        >
          80 759
        </td>
      </tr>
      <tr
        data-sourcepos="114:1-114:20"
      >
        <td
          data-sourcepos="114:3-114:9"
          style={
            Object {
              "textAlign": "left",
            }
          }
        >
          Vue.js
        </td>
        <td
          data-sourcepos="114:12-114:18"
          style={
            Object {
              "textAlign": "right",
            }
          }
        >
          73 322
        </td>
      </tr>
      <tr
        data-sourcepos="115:1-115:21"
      >
        <td
          data-sourcepos="115:3-115:14"
          style={
            Object {
              "textAlign": "left",
            }
          }
        >
          sse-channel
        </td>
        <td
          data-sourcepos="115:17-115:19"
          style={
            Object {
              "textAlign": "right",
            }
          }
        >
          50
        </td>
      </tr>
    </tbody>
  </table>
  <h2
    data-sourcepos="118:1-118:9"
  >
    Links
  </h2>
  <p
    data-sourcepos="120:1-120:36"
  >
    <a
      data-sourcepos="120:1-120:36"
      href="https://espen.codes/"
    >
      Espen.Codes
    </a>
  </p>
  <p
    data-sourcepos="122:1-122:69"
  >
    <a
      data-sourcepos="122:1-122:69"
      href="https://www.sanity.io/"
      title="Sanity, the headless CMS and PaaS"
    >
      Sanity
    </a>
  </p>
  <p
    data-sourcepos="124:1-124:61"
  >
    Autoconverted link 
    <a
      data-sourcepos="124:20-124:61"
      href="https://github.com/rexxars/react-markdown"
    >
      https://github.com/rexxars/react-markdown
    </a>
  </p>
  <p
    data-sourcepos="126:1-126:25"
  >
    <a
      data-sourcepos="126:1-126:25"
      href="https://reactjs.org"
      title="React, A JavaScript library for building user interfaces"
    >
      Link references
    </a>
  </p>
  <h2
    data-sourcepos="131:1-131:10"
  >
    Images
  </h2>
  <p
    data-sourcepos="133:1-134:99"
  >
    <img
      alt="React Markdown"
      data-sourcepos="133:1-133:82"
      src="https://espen.codes/assets/projects/react-markdown/320x180.png"
    />
    

    <img
      alt="Mead"
      data-sourcepos="134:1-134:99"
      src="https://espen.codes/assets/projects/mead/320x180.png"
      title="Mead, on-the-fly image transformer"
    />
  </p>
  <p
    data-sourcepos="136:1-136:53"
  >
    Like links, Images also have a footnote style syntax
  </p>
  <p
    data-sourcepos="138:1-138:21"
  >
    <img
      alt="Alt text"
      data-sourcepos="138:1-138:21"
    />
  </p>
  <p
    data-sourcepos="140:1-140:66"
  >
    With a reference later in the document defining the URL location:
  </p>
  <h2
    data-sourcepos="144:1-144:15"
  >
    Hard breaks
  </h2>
  <p
    data-sourcepos="146:1-147:19"
  >
    Yeah, hard breaks
    <br
      data-sourcepos="146:18-147:1"
    />
    can be useful too.
  </p>
  <h2
    data-sourcepos="149:1-149:8"
  >
    HTML
  </h2>
  <p
    data-sourcepos="151:1-151:72"
  >
    Does anyone actually like the fact that you can embed HTML in markdown?
  </p>
  <span>
    &lt;p&gt;Well, you can put blocks of HTML in here. It'll kind of work.&lt;/p&gt;
  </span>
</div>
`;

exports[`should be able to override renderers 1`] = `
<div>
  <span
    className="heading level-1"
  >
    Header
  </span>
  <p>
    Paragraph
  </p>
  <span
    className="heading level-2"
  >
    New header
  </span>
  <ol>
    <li>
      List item
    </li>
    <li>
      List item 2
    </li>
  </ol>
  <p>
    Foo
  </p>
</div>
`;

exports[`should be able to render inline code 1`] = `
<div>
  <p>
    Just call 
    <code>
      renderToStaticMarkup()
    </code>
    , already
  </p>
</div>
`;

exports[`should be able to render inline html 1`] = `
<div>
  <p>
    I am having 
    <span
      dangerouslySetInnerHTML={
        Object {
          "__html": "<strong>",
        }
      }
    />
    so
    <span
      dangerouslySetInnerHTML={
        Object {
          "__html": "</strong>",
        }
      }
    />
     much fun
  </p>
</div>
`;

exports[`should escape html blocks by default 1`] = `
<div>
  <p>
    This is a regular paragraph.
  </p>
  <span>
    &lt;table&gt;
    &lt;tr&gt;
        &lt;td&gt;Foo&lt;/td&gt;
    &lt;/tr&gt;
&lt;/table&gt;
  </span>
  <p>
    This is another regular paragraph.
  </p>
</div>
`;

exports[`should handle blockquotes 1`] = `
<div>
  <blockquote>
    <p>
      Moo
Tools
FTW
    </p>
  </blockquote>
</div>
`;

exports[`should handle bold/strong text 1`] = `
<div>
  <p>
    React is 
    <strong>
      totally
    </strong>
     
    <strong>
      awesome
    </strong>
  </p>
</div>
`;

exports[`should handle code tags with language specification 1`] = `
<div>
  <pre>
    <code
      className="language-js"
    >
      var foo = require('bar');
foo();
    </code>
  </pre>
</div>
`;

exports[`should handle code tags without any language specification 1`] = `
<div>
  <pre>
    <code>
      var foo = require('bar');
foo();
    </code>
  </pre>
</div>
`;

exports[`should handle emphasis 1`] = `
<div>
  <p>
    React is 
    <em>
      totally
    </em>
     
    <em>
      awesome
    </em>
  </p>
</div>
`;

exports[`should handle horizontal rules 1`] = `
<div>
  <p>
    Foo
  </p>
  <hr />
  <p>
    Bar
  </p>
</div>
`;

exports[`should handle html blocks 1`] = `
<div>
  <p>
    This is a regular paragraph.
  </p>
  <div
    dangerouslySetInnerHTML={
      Object {
        "__html": "<table>
    <tr>
        <td>Foo</td>
    </tr>
</table>",
      }
    }
  />
  <p>
    This is another regular paragraph.
  </p>
</div>
`;

exports[`should handle images with custom uri transformer 1`] = `
<div>
  <p>
    This is 
    <img
      alt="an image"
      src="/ninja.jpg"
    />
    .
  </p>
</div>
`;

exports[`should handle images with special characters in alternative text 1`] = `
<div>
  <p>
    This is 
    <img
      alt="a ninja's image"
      src="/ninja.png"
    />
    .
  </p>
</div>
`;

exports[`should handle images with title attribute 1`] = `
<div>
  <p>
    This is 
    <img
      alt="an image"
      src="/ninja.png"
      title="foo bar"
    />
    .
  </p>
</div>
`;

exports[`should handle images without title attribute 1`] = `
<div>
  <p>
    This is 
    <img
      alt="an image"
      src="/ninja.png"
    />
    .
  </p>
</div>
`;

exports[`should handle inline html with escapeHtml option enabled 1`] = `
<div>
  <p>
    I am having 
    <span>
      &lt;strong&gt;
    </span>
    so
    <span>
      &lt;/strong&gt;
    </span>
     much fun
  </p>
</div>
`;

exports[`should handle links with custom uri transformer 1`] = `
<div>
  <p>
    This is 
    <a
      href="//espen.codes/"
    >
      a link
    </a>
     to Espen.Codes.
  </p>
</div>
`;

exports[`should handle links with title attribute 1`] = `
<div>
  <p>
    This is 
    <a
      href="https://espen.codes/"
      title="some title"
    >
      a link
    </a>
     to Espen.Codes.
  </p>
</div>
`;

exports[`should handle links without title attribute 1`] = `
<div>
  <p>
    This is 
    <a
      href="https://espen.codes/"
    >
      a link
    </a>
     to Espen.Codes.
  </p>
</div>
`;

exports[`should handle loose, unordered lists 1`] = `
<div>
  <ul>
    <li>
      <p>
        foo
      </p>
    </li>
    <li>
      bar
    </li>
  </ul>
</div>
`;

exports[`should handle multiline paragraphs properly (softbreak, paragraphs) 1`] = `
<div>
  <p>
    React is awesome
And so is markdown
    <br />
    Combining = epic
  </p>
</div>
`;

exports[`should handle multiple paragraphs properly 1`] = `
<div>
  <p>
    React is awesome
And so is markdown
  </p>
  <p>
    Combining = epic
  </p>
</div>
`;

exports[`should handle nested blockquotes 1`] = `
<div>
  <blockquote>
    <blockquote>
      <p>
        Lots of ex-Mootoolers on the React team
      </p>
    </blockquote>
    <p>
      Totally didn't know that.
    </p>
    <blockquote>
      <p>
        There's a reason why it turned out so awesome
      </p>
    </blockquote>
    <p>
      Haha I guess you're right!
    </p>
  </blockquote>
</div>
`;

exports[`should handle ordered lists 1`] = `
<div>
  <ol>
    <li>
      Ordered
    </li>
    <li>
      Lists
    </li>
    <li>
      Are cool
    </li>
  </ol>
</div>
`;

exports[`should handle ordered lists with a start index 1`] = `
<div>
  <ol
    start="7"
  >
    <li>
      Ordered
    </li>
    <li>
      Lists
    </li>
    <li>
      Are cool
    </li>
  </ol>
</div>
`;

exports[`should handle tight, unordered lists 1`] = `
<div>
  <ul>
    <li>
      Unordered
    </li>
    <li>
      Lists
    </li>
    <li>
      Are cool
    </li>
  </ul>
</div>
`;

exports[`should render image references 1`] = `"<p>Checkout out this ninja: <img src=\\"/assets/ninja.png\\" alt=\\"The Waffle Ninja\\"/>. Pretty neat, eh?</p>"`;

exports[`should render link references 1`] = `"<p>Stuff were changed in <a href=\\"https://github.com/rexxars/react-markdown/compare/v1.1.3...v1.1.4\\">1.1.4</a>. Check out the changelog for reference.</p>"`;

exports[`should render tables 1`] = `"<p>Languages are fun, right?</p><table><thead><tr><th style=\\"text-align:left\\">ID</th><th style=\\"text-align:center\\">English</th><th style=\\"text-align:right\\">Norwegian</th><th>Italian</th></tr></thead><tbody><tr><td style=\\"text-align:left\\">1</td><td style=\\"text-align:center\\">one</td><td style=\\"text-align:right\\">en</td><td>uno</td></tr><tr><td style=\\"text-align:left\\">2</td><td style=\\"text-align:center\\">two</td><td style=\\"text-align:right\\">to</td><td>due</td></tr><tr><td style=\\"text-align:left\\">3</td><td style=\\"text-align:center\\">three</td><td style=\\"text-align:right\\">tre</td><td>tre</td></tr></tbody></table>"`;

exports[`should set source position attributes if sourcePos option is enabled 1`] = `
<div
  data-sourcepos="1:1-5:4"
>
  <p
    data-sourcepos="1:1-1:4"
  >
    Foo
  </p>
  <hr
    data-sourcepos="3:1-3:13"
  />
  <p
    data-sourcepos="5:1-5:4"
  >
    Bar
  </p>
</div>
`;

exports[`should skip html blocks if skipHtml prop is set 1`] = `
<div>
  <p>
    This is a regular paragraph.
  </p>
  <p>
    This is another regular paragraph.
  </p>
</div>
`;

exports[`should skip inline html with skipHtml option enabled 1`] = `
<div>
  <p>
    I am having 
    so
     much fun
  </p>
</div>
`;

exports[`should skip nodes that are defined as disallowed 1`] = `
<div>
  <h1>
    Header
  </h1>
  <p>
    Paragraph
  </p>
  <h2>
    New header
  </h2>
  <ol />
  <p>
    Foo
  </p>
</div>
`;

exports[`should skip nodes that are not defined as allowed 1`] = `
<div>
  <p>
    Paragraph
  </p>
  <ol>
    <li>
      List item
    </li>
    <li>
      List item 2
    </li>
  </ol>
</div>
`;

exports[`should unwrap child nodes from disallowed nodes, if unwrapDisallowed option is enabled 1`] = `
<div>
  <p>
    Espen 
    <del>
      initiated
    </del>
     had the initial commit
    , but has had several 
    contributors
  </p>
</div>
`;

exports[`uses passed classname for root component 1`] = `
<div
  className="md"
>
  <p>
    Test
  </p>
</div>
`;
