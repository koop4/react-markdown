// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`can render the most basic of documents (single paragraph) 1`] = `
<div>
  <p>
    Test
  </p>
</div>
`;

exports[`should be able to override renderers 1`] = `
<div>
  <span
    className="heading level-1"
  >
    Header
  </span>
  <p>
    Paragraph
  </p>
  <span
    className="heading level-2"
  >
    New header
  </span>
  <ol>
    <li>
      List item
    </li>
    <li>
      List item 2
    </li>
  </ol>
  <p>
    Foo
  </p>
</div>
`;

exports[`should be able to render inline code 1`] = `
<div>
  <p>
    Just call 
    <code>
      renderToStaticMarkup()
    </code>
    , already
  </p>
</div>
`;

exports[`should be able to render inline html 1`] = `
<div>
  <p>
    I am having 
    <span
      dangerouslySetInnerHTML={
        Object {
          "__html": "<strong>",
        }
      }
    />
    so
    <span
      dangerouslySetInnerHTML={
        Object {
          "__html": "</strong>",
        }
      }
    />
     much fun
  </p>
</div>
`;

exports[`should escape html blocks by default 1`] = `
<div>
  <p>
    This is a regular paragraph.
  </p>
  <span>
    &lt;table&gt;
    &lt;tr&gt;
        &lt;td&gt;Foo&lt;/td&gt;
    &lt;/tr&gt;
&lt;/table&gt;
  </span>
  <p>
    This is another regular paragraph.
  </p>
</div>
`;

exports[`should handle blockquotes 1`] = `
<div>
  <blockquote>
    <p>
      Moo
Tools
FTW
    </p>
  </blockquote>
</div>
`;

exports[`should handle bold/strong text 1`] = `
<div>
  <p>
    React is 
    <strong>
      totally
    </strong>
     
    <strong>
      awesome
    </strong>
  </p>
</div>
`;

exports[`should handle code tags with language specification 1`] = `
<div>
  <pre>
    <code
      className="language-js"
    >
      var foo = require('bar');
foo();
    </code>
  </pre>
</div>
`;

exports[`should handle code tags without any language specification 1`] = `
<div>
  <pre>
    <code>
      var foo = require('bar');
foo();
    </code>
  </pre>
</div>
`;

exports[`should handle emphasis 1`] = `
<div>
  <p>
    React is 
    <em>
      totally
    </em>
     
    <em>
      awesome
    </em>
  </p>
</div>
`;

exports[`should handle horizontal rules 1`] = `
<div>
  <p>
    Foo
  </p>
  <hr />
  <p>
    Bar
  </p>
</div>
`;

exports[`should handle html blocks 1`] = `
<div>
  <p>
    This is a regular paragraph.
  </p>
  <div
    dangerouslySetInnerHTML={
      Object {
        "__html": "<table>
    <tr>
        <td>Foo</td>
    </tr>
</table>",
      }
    }
  />
  <p>
    This is another regular paragraph.
  </p>
</div>
`;

exports[`should handle images with custom uri transformer 1`] = `
<div>
  <p>
    This is 
    <img
      alt="an image"
      src="/ninja.jpg"
    />
    .
  </p>
</div>
`;

exports[`should handle images with special characters in alternative text 1`] = `
<div>
  <p>
    This is 
    <img
      alt="a ninja's image"
      src="/ninja.png"
    />
    .
  </p>
</div>
`;

exports[`should handle images with title attribute 1`] = `
<div>
  <p>
    This is 
    <img
      alt="an image"
      src="/ninja.png"
      title="foo bar"
    />
    .
  </p>
</div>
`;

exports[`should handle images without title attribute 1`] = `
<div>
  <p>
    This is 
    <img
      alt="an image"
      src="/ninja.png"
    />
    .
  </p>
</div>
`;

exports[`should handle inline html with escapeHtml option enabled 1`] = `
<div>
  <p>
    I am having 
    <span>
      &lt;strong&gt;
    </span>
    so
    <span>
      &lt;/strong&gt;
    </span>
     much fun
  </p>
</div>
`;

exports[`should handle links with custom uri transformer 1`] = `
<div>
  <p>
    This is 
    <a
      href="//espen.codes/"
    >
      a link
    </a>
     to Espen.Codes.
  </p>
</div>
`;

exports[`should handle links with title attribute 1`] = `
<div>
  <p>
    This is 
    <a
      href="https://espen.codes/"
      title="some title"
    >
      a link
    </a>
     to Espen.Codes.
  </p>
</div>
`;

exports[`should handle links without title attribute 1`] = `
<div>
  <p>
    This is 
    <a
      href="https://espen.codes/"
    >
      a link
    </a>
     to Espen.Codes.
  </p>
</div>
`;

exports[`should handle loose, unordered lists 1`] = `
<div>
  <ul>
    <li>
      <p>
        foo
      </p>
    </li>
    <li>
      bar
    </li>
  </ul>
</div>
`;

exports[`should handle multiline paragraphs properly (softbreak, paragraphs) 1`] = `
<div>
  <p>
    React is awesome
And so is markdown
    <br />
    Combining = epic
  </p>
</div>
`;

exports[`should handle multiple paragraphs properly 1`] = `
<div>
  <p>
    React is awesome
And so is markdown
  </p>
  <p>
    Combining = epic
  </p>
</div>
`;

exports[`should handle nested blockquotes 1`] = `
<div>
  <blockquote>
    <blockquote>
      <p>
        Lots of ex-Mootoolers on the React team
      </p>
    </blockquote>
    <p>
      Totally didn't know that.
    </p>
    <blockquote>
      <p>
        There's a reason why it turned out so awesome
      </p>
    </blockquote>
    <p>
      Haha I guess you're right!
    </p>
  </blockquote>
</div>
`;

exports[`should handle ordered lists 1`] = `
<div>
  <ol>
    <li>
      Ordered
    </li>
    <li>
      Lists
    </li>
    <li>
      Are cool
    </li>
  </ol>
</div>
`;

exports[`should handle ordered lists with a start index 1`] = `
<div>
  <ol
    start="7"
  >
    <li>
      Ordered
    </li>
    <li>
      Lists
    </li>
    <li>
      Are cool
    </li>
  </ol>
</div>
`;

exports[`should handle tight, unordered lists 1`] = `
<div>
  <ul>
    <li>
      Unordered
    </li>
    <li>
      Lists
    </li>
    <li>
      Are cool
    </li>
  </ul>
</div>
`;

exports[`should render image references 1`] = `"<p>Checkout out this ninja: <img src=\\"/assets/ninja.png\\" alt=\\"The Waffle Ninja\\"/>. Pretty neat, eh?</p>"`;

exports[`should render link references 1`] = `"<p>Stuff were changed in <a href=\\"https://github.com/rexxars/react-markdown/compare/v1.1.3...v1.1.4\\">1.1.4</a>. Check out the changelog for reference.</p>"`;

exports[`should render tables 1`] = `"<p>Languages are fun, right?</p><table><thead><tr><th style=\\"text-align:left\\">ID</th><th style=\\"text-align:center\\">English</th><th style=\\"text-align:right\\">Norwegian</th><th>Italian</th></tr></thead><tbody><tr><td style=\\"text-align:left\\">1</td><td style=\\"text-align:center\\">one</td><td style=\\"text-align:right\\">en</td><td>uno</td></tr><tr><td style=\\"text-align:left\\">2</td><td style=\\"text-align:center\\">two</td><td style=\\"text-align:right\\">to</td><td>due</td></tr><tr><td style=\\"text-align:left\\">3</td><td style=\\"text-align:center\\">three</td><td style=\\"text-align:right\\">tre</td><td>tre</td></tr></tbody></table>"`;

exports[`should set source position attributes if sourcePos option is enabled 1`] = `
<div
  data-sourcepos="1:1-5:4"
>
  <p
    data-sourcepos="1:1-1:4"
  >
    Foo
  </p>
  <hr
    data-sourcepos="3:1-3:13"
  />
  <p
    data-sourcepos="5:1-5:4"
  >
    Bar
  </p>
</div>
`;

exports[`should skip html blocks if skipHtml prop is set 1`] = `
<div>
  <p>
    This is a regular paragraph.
  </p>
  <p>
    This is another regular paragraph.
  </p>
</div>
`;

exports[`should skip inline html with skipHtml option enabled 1`] = `
<div>
  <p>
    I am having 
    so
     much fun
  </p>
</div>
`;

exports[`should skip nodes that are defined as disallowed 1`] = `
<div>
  <h1>
    Header
  </h1>
  <p>
    Paragraph
  </p>
  <h2>
    New header
  </h2>
  <ol />
  <p>
    Foo
  </p>
</div>
`;

exports[`should skip nodes that are not defined as allowed 1`] = `
<div>
  <p>
    Paragraph
  </p>
  <ol>
    <li>
      List item
    </li>
    <li>
      List item 2
    </li>
  </ol>
</div>
`;

exports[`should unwrap child nodes from disallowed nodes, if unwrapDisallowed option is enabled 1`] = `
<div>
  <p>
    Espen 
    <del>
      initiated
    </del>
     had the initial commit
    , but has had several 
    contributors
  </p>
</div>
`;

exports[`uses passed classname for root component 1`] = `
<div
  className="md"
>
  <p>
    Test
  </p>
</div>
`;
